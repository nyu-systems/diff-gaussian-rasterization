#include <getopt.h>

#include "utils/tensor.cuh"
#include "modules/param.cuh"
#include "modules/adam.cuh"

unsigned long long randgen_seed = 0;


void test_adam(bool on_gpu)
{
    Tensor<float> X{3, 10, on_gpu};
    float x_[3][10] = {{-0.27592263,  1.45741498, -0.27912900,  0.50304019,  0.86184853,
         -0.32407281, -1.52546418, -1.96944582, -0.53279704, -0.41407126},
        {-0.95485938,  1.15692687,  0.12052462,  1.02900600,  1.84076631,
         -1.68385124, -0.33590776,  1.00695574,  1.03142250, -1.00076318},
        { 1.81195509, -0.22080292,  0.11890169, -0.65061569, -0.81037229,
          0.54507124,  0.81413180,  1.09742665,  1.57154584,  0.57803059}};
    float x_grads[3][3][10] =
            {{{ 0.07473613,  1.56163168,  0.28564924,  0.01889815, -0.54510576,
           0.85064983, -0.56617403, -0.07482366,  0.02878939,  1.54267907},
         { 0.58476758,  0.26001054,  1.92268038,  1.12250161,  0.60945231,
          -0.70252180,  0.11896414,  2.62669826,  1.14733517,  1.32487988},
         {-0.81552619,  0.99882501, -0.64356738, -0.04739735,  1.46378231,
           0.24348104, -2.88094211, -0.91592652, -2.29048586, -1.01007438}},

        {{-0.98535091, -1.73668420, -0.05086657, -1.44171917,  0.43991885,
           0.65620345,  0.44912094, -0.14710099, -0.21040316, -0.40319443},
         {-0.06958726,  0.43770602,  0.07748552,  1.24373889,  0.14032423,
           1.00267744,  1.72498930,  0.59682721,  0.26976928, -0.54612094},
         {-0.34102049, -0.59851044,  1.13875771,  1.05349743,  1.95135224,
           0.69864887,  0.38912052, -1.05770671,  0.29336196, -2.67789888}},

        {{ 1.37632000, -0.18108919, -0.01681380, -0.75458151,  1.11079967,
          -1.44590819,  0.17561451,  0.99313498,  0.01364532, -0.68604785},
         { 0.76482975,  0.09839045,  1.56569505,  0.33089188,  1.01337695,
           0.70193583, -1.60114908, -0.51892471,  0.10334733, -1.26984406},
         { 0.69558650, -0.54795384, -0.14722003, -0.17217109, -1.24127150,
          -0.62672704, -0.76675224,  1.17779899, -0.91626447, -0.13996741}}};

    float results[3][3][10] =
            {{{-0.27692261,  1.45641494, -0.28012899,  0.50204021,  0.86284852,
         -0.32507280, -1.52446413, -1.96844578, -0.53379703, -0.41507125},
        {-0.95585936,  1.15592682,  0.11952462,  1.02800596,  1.83976626,
         -1.68285120, -0.33690774,  1.00595570,  1.03042245, -1.00176322},
        { 1.81295514, -0.22180292,  0.11990169, -0.64961571, -0.81137228,
          0.54407126,  0.81513178,  1.09842670,  1.57254589,  0.57903057}},
        {{-0.27623126,  1.45652044, -0.28065813,  0.50277549,  0.86290234,
         -0.32605791, -1.52440190, -1.96747875, -0.53315055, -0.41553125},
        {-0.95643675,  1.15494490,  0.11882512,  1.02700460,  1.83894622,
         -1.68307638, -0.33769619,  1.00513732,  1.02959979, -1.00209892},
        { 1.81386054, -0.22199498,  0.11958333, -0.65032899, -0.81236959,
          0.54314810,  0.81569618,  1.09942782,  1.57311594,  0.57996327}},
        {{-0.27643868,  1.45665121, -0.28102949,  0.50357533,  0.86238408,
         -0.32599893, -1.52450609, -1.96798646, -0.53269285, -0.41560516},
        {-0.95721519,  1.15407836,  0.11800245,  1.02612138,  1.83806980,
         -1.68354523, -0.33770913,  1.00463712,  1.02891040, -1.00186920},
        { 1.81401503, -0.22185710,  0.11941027, -0.65077019, -0.81276673,
          0.54301679,  0.81628108,  1.09960818,  1.57376122,  0.58071458}}};

    float exp_avgs[3][3][10] = 
        {{{ 0.00747361,  0.15616317,  0.02856492,  0.00188981, -0.05451057,
          0.08506498, -0.05661741, -0.00748237,  0.00287894,  0.15426791},
        { 0.05847676,  0.02600105,  0.19226804,  0.11225016,  0.06094523,
         -0.07025218,  0.01189641,  0.26266983,  0.11473352,  0.13248800},
        {-0.08155262,  0.09988251, -0.06435674, -0.00473973,  0.14637823,
          0.02434810, -0.28809422, -0.09159265, -0.22904859, -0.10100744}},
          {{-0.09180884, -0.03312158,  0.02062177, -0.14247109, -0.00506763,
          0.14217883, -0.00604357, -0.02144423, -0.01844927,  0.09852166},
        { 0.04567035,  0.06717155,  0.18078980,  0.22539903,  0.06888314,
          0.03704078,  0.18320571,  0.29608557,  0.13023709,  0.06462710},
        {-0.10749941,  0.03004321,  0.05595471,  0.10108399,  0.32687563,
          0.09177818, -0.22037274, -0.18820406, -0.17680754, -0.35869658}},
          {{ 0.05500405, -0.04791834,  0.01687822, -0.20368212,  0.10651910,
         -0.01662987,  0.01212224,  0.08001369, -0.01523981,  0.02006471},
        { 0.11758629,  0.07029344,  0.31928033,  0.23594831,  0.16333252,
          0.10353029,  0.00477022,  0.21458451,  0.12754811, -0.06882001},
        {-0.02719081, -0.02775650,  0.03563723,  0.07375848,  0.17006090,
          0.01992766, -0.27501068, -0.05160376, -0.25075322, -0.33682367}}};

    float exp_avg_sq[3][3][10] = 
        {{{5.58548982e-06, 2.43869377e-03, 8.15954918e-05, 3.57140067e-07,
         2.97140301e-04, 7.23605219e-04, 3.20553052e-04, 5.59858063e-06,
         8.28829002e-07, 2.37985887e-03},
        {3.41953128e-04, 6.76054842e-05, 3.69669986e-03, 1.26000994e-03,
         3.71432106e-04, 4.93536878e-04, 1.41524679e-05, 6.89954450e-03,
         1.31637813e-03, 1.75530673e-03},
        {6.65083004e-04, 9.97651485e-04, 4.14178998e-04, 2.24650876e-06,
         2.14265869e-03, 5.92830183e-05, 8.29982758e-03, 8.38921405e-04,
         5.24632540e-03, 1.02025026e-03}},
         {{9.76496318e-04, 5.45232696e-03, 8.41013098e-05, 2.07891106e-03,
         4.90371720e-04, 1.15348469e-03, 5.21942158e-04, 2.72316829e-05,
         4.50974912e-05, 2.54004495e-03},
        {3.46453569e-04, 2.59124441e-04, 3.69900721e-03, 2.80563650e-03,
         3.90751578e-04, 1.49840547e-03, 2.98972661e-03, 7.24884821e-03,
         1.38783723e-03, 2.05179956e-03},
        {7.80712930e-04, 1.35486864e-03, 1.71053410e-03, 1.11210113e-03,
         5.94829163e-03, 5.47334028e-04, 8.44294205e-03, 1.95682608e-03,
         5.32714045e-03, 8.19037296e-03}},
         {{2.86977668e-03, 5.47966780e-03, 8.42999143e-05, 2.64622527e-03,
         1.72375736e-03, 3.24298185e-03, 5.52260666e-04, 1.01352157e-03,
         4.52385902e-05, 3.00816679e-03},
        {9.31071700e-04, 2.68546020e-04, 6.14670943e-03, 2.91232043e-03,
         1.41729368e-03, 1.98962097e-03, 5.55041526e-03, 7.51088234e-03,
         1.39713008e-03, 3.66225187e-03},
        {1.26377284e-03, 1.65376719e-03, 1.73049734e-03, 1.14063185e-03,
         7.48309819e-03, 9.39573511e-04, 9.02240910e-03, 3.34207993e-03,
         6.16135402e-03, 8.20177421e-03}}};

    X = X.toHost();
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 10; j++) {
            Index(X, i, j) = x_[i][j];
        }
    }
    Parameter<float> p(3, 10, on_gpu);
    p.t = X.toDevice();

    std::vector<Parameter<float>*> params;
    params.emplace_back(&p);
    ADAM adam(params, 0.001, 0.9, 0.999, 1e-8, 0);

    for (int e = 0; e < 3; e++) {

        Tensor<float> dt{3, 10, on_gpu};
        Tensor<float> res{3, 10, on_gpu};
        Tensor<float> mt{3, 10, on_gpu};
        Tensor<float> vt{3, 10, on_gpu};

        dt = dt.toHost();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 10; j++) {
                Index(dt, i, j) = x_grads[e][i][j];
            }
        }
        p.dt = dt.toDevice();

        adam.step();

        res = res.toHost();
        mt = mt.toHost();
        vt = vt.toHost();

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 10; j++) {
                Index(res, i, j) = results[e][i][j];
                Index(mt, i, j) = exp_avgs[e][i][j];
                Index(vt, i, j) = exp_avg_sq[e][i][j];
            }
        }
        // std::cout << "t: " << p.t.str() << std::endl;

        // tmp = tmp.toDevice();
        assert(op_allclose(mt, *(adam.mt[0])));
        assert(op_allclose(vt, *(adam.vt[0])));
        assert(op_allclose(res, p.t));
    }
}


bool is_close_enough(float a, float b) {
    if (std::abs(a - b) > 0.0001) {
        return false;
    } else {
        return true;
    }
}
void assert_all_close_enough(Tensor<float> t, std::vector<float> v)
{
    for (int i = 0; i < t.h; i++) {
        for (int j = 0; j < t.w; j++) {
            assert(is_close_enough(Index(t, i, j), v[i*t.w+j]));
        }
    }
}

int main(int argc, char *argv[])
{
    bool test_gpu = true;
    int test_m = 335, test_n = 587, test_k= 699;

    for (;;)
    {
        switch (getopt(argc, argv, "s:c:m:n:k:"))
        {
        case 's':
            randgen_seed = atoll(optarg);
            continue;
        case 'c': //cpu testing only
            test_gpu = false;
            continue;
        case 'm':
            test_m = atoi(optarg);
            continue;
        case 'n':
            test_n = atoi(optarg);
            continue;
        case 'k':
            test_k = atoi(optarg);
            continue;
        case -1:
            break;
        }
        break;
    }
    test_adam(test_gpu);
    std::cout << "All tests completed successfully!" << std::endl;
    return 0;
}
